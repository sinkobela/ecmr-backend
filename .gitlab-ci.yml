include:
  - template: Code-Quality.gitlab-ci.yml
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
  - template: Jobs/SAST.gitlab-ci.yml

stages:
  - build
  - test
  - visualize
  - archive
  - deploy

variables:
  PROJECT_PREFIX: "/ecmr-backend"
  # Specify to Docker where to create the certificates, Docker will
  # create them automatically on boot, and will create
  # `/certs/client` that will be shared between the service and job
  # container, thanks to volume mount from config.toml
  DOCKER_TLS_CERTDIR: ""
  # Set Docker Host to GitLab Registry
  # DOCKER_HOST: "tcp://0.0.0.0:2375"
  # See Code Quality Image
  # DOCKER_DRIVER: overlay2
  # DOCKER_TLS_VERIFY: 1
  # DOCKER_SOCKET_PATH: /var/run/docker.sock
  # DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  # DOCKER_BUILDKIT: "1"
  # Instruct Testcontainers to use the daemon of DinD, use port 2375 for non-tls connections.
  DOCKER_HOST: "tcp://docker:2375"
  # Enable Advanced SAST - this is required for JAVA 21
  GITLAB_ADVANCED_SAST_ENABLED: 'true'
  SAST_JAVA_VERSION: 21

  MAVEN_OPTS: >-
    -Dhttps.protocols=TLSv1.2
    -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository
    -Dorg.slf4j.simpleLogger.showDateTime=true
    -Djava.awt.headless=true

  MAVEN_CLI_OPTS: >-
    --batch-mode
    --errors
    --fail-at-end
    --show-version
    --no-transfer-progress
    -DinstallAtEnd=true
    -DdeployAtEnd=true

# Use the same image that is used to build from docker
image: maven:3.9.6-eclipse-temurin-21

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Run unit tests and generate reports
test:
  stage: test
  services:
    - name: docker:dind
      alias: docker
  tags:
    - ecmr
  script:
    # -  mvn $MAVEN_CLI_OPTS verify
    -  mvn $MAVEN_CLI_OPTS clean org.jacoco:jacoco-maven-plugin:prepare-agent
      verify jacoco:report   
  coverage: /Total.*?([0-9]{1,3})%/
  artifacts:
    when: always
    reports:
      junit:
        - $CI_PROJECT_DIR/target/site/jacoco/jacoco.xml
        - $CI_PROJECT_DIR/target/surefire-reports/TEST-*.xml
      #  - $CI_PROJECT_DIR/target/failsafe-reports/TEST-*.xml
    paths:
      - $CI_PROJECT_DIR/target/site/jacoco/jacoco.xml
      - $CI_PROJECT_DIR/target/surefire-reports/TEST-*.xml
      #- $CI_PROJECT_DIR/target/failsafe-reports/TEST-*.xml
 
  rules:
  # Make this job available in branch pipelines (variable CI_COMMIT_BRANCH exists) and merge request pipelines (variable CI_MERGE_REQUEST_IID exists)
  # Job is not allowed to fail in MRs
  # - if: $CI_COMMIT_BRANCH
  #  allow_failure: true
  # - if: $CI_MERGE_REQUEST_IID
  #  allow_failure: false

coverage:
  # Must be in a stage later than test stage.
  # The `visualize` stage does not exist by default.
  stage: visualize
  tags:
    - ecmr
  image: registry.gitlab.com/haynes/jacoco2cobertura
  script:
    # convert report from jacoco to cobertura, using relative project path
    - python /opt/cover2cover.py $CI_PROJECT_DIR/target/site/jacoco/jacoco.xml $CI_PROJECT_DIR/src/main/java/ > $CI_PROJECT_DIR/cobertura.xml
  needs:
    - job: test
      artifacts: true
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: $CI_PROJECT_DIR/cobertura.xml

code_quality:
  stage: test
  tags:
    - ecmr
  variables:
    CODECLIMATE_REGISTRY_USERNAME: $CI_REGISTRY_USER
    CODECLIMATE_REGISTRY_PASSWORD: $CI_REGISTRY_PASSWORD

third-party-license-check:
  stage: test
  tags:
    - ecmr
  variables:
    REFERENCE_LICENSES_FILE: $CI_PROJECT_DIR/third-party-licenses/third-party-licenses.txt
    GENERATED_LICENSES_FILE: $CI_PROJECT_DIR/target/generated-sources/license/THIRD-PARTY.txt
  script:
    - 'mvn $MAVEN_CLI_OPTS -f pom.xml org.codehaus.mojo:license-maven-plugin:add-third-party'
    - 'cmp --silent $REFERENCE_LICENSES_FILE $GENERATED_LICENSES_FILE || export LICENSES_CHANGED=true'
    - 'if [ ! -z ${LICENSES_CHANGED} ]; then
        echo Some licenses used by the third-party dependencies have changed.;
        echo Please refer to the README and generate/update them accordingly.;
        git diff --no-index --unified=0 $REFERENCE_LICENSES_FILE $GENERATED_LICENSES_FILE;
      fi'
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/target/generated-sources/license/"
      - "${CI_PROJECT_DIR}/third-party-licenses/"
    expire_in: 1 week
    when: on_failure
  rules:
    # License check must succeed in main and MRs
    - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) || $CI_MERGE_REQUEST_IID
      allow_failure: false
    # "Default clause" meaning: in all other cases
    - when: on_success
      allow_failure: true

# To deploy packages from CI, create a `ci_settings.xml` file
# For deploying packages to GitLab's Maven Repository: See https://docs.gitlab.com/ee/user/packages/maven_repository/index.html#create-maven-packages-with-gitlab-cicd for more details.
# Please note: The GitLab Maven Repository is currently only available in GitLab Premium / Ultimate.
# For `master` or `main` branch run `mvn deploy` automatically.
deploy:
  stage: archive
  tags:
    - ecmr
  script:
    #    - 'cd ecmr-backend'
    - 'mvn deploy -s ci_settings.xml -DskipTests'
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

docker-build-ecmr-backend:
  tags:
    - ecmr
  variables:
    IMAGE_TAG: "latest"
    IMAGE_NAME: $CI_COMMIT_REF_SLUG 
  stage: archive
  cache: {}
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  before_script:
  - rm -rf ~/.docker/manifests || true
  script:
  - echo "CI_REGISTRY=$CI_REGISTRY"
  - echo "DOCKER_HOST=$DOCKER_HOST"
  - echo "CI_PROJECT_DIR=${CI_PROJECT_DIR}"
  - echo "$IMAGE_TAG={$IMAGE_TAG}"
  - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile-for-compose"
      --destination "${CI_REGISTRY_IMAGE}:$IMAGE_TAG"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - ecmr-backend/**/*
